{"ast":null,"code":"var _jsxFileName = \"/Users/kimberlykwon/Documents/hi_john/tkc-sign-up-calendar/src/ScheduleGrid.js\";\nimport React from 'react';\nimport Columns from 'react-columns';\nimport GridColumn from './GridColumn';\n/*\nfigure out date data here\n*/\n\nfunction getThisWeek() {\n  // const todayTime = new Date.now(); // time\n  const todayDay = new Date().getDay();\n  const todayDate = new Date().getDate();\n  const daysOfTheWeek = [\"Mon\", \"Tues\", \"Wed\", \"Thurs\"];\n  const fullDaysOutput = []; // if today's date is in the middle of the week, get dates before and after and calculate next week\n  // TODO: figure out edge cases\n\n  if (todayDay >= 0 && todayDay <= 4) {\n    for (var i = 0; i < 4; i++) {\n      const offset = todayDay - i - 1;\n      fullDaysOutput[i] = daysOfTheWeek[i] + \" \" + new Date().getMonth() + \"/\" + (new Date().getDate() - offset);\n    }\n  }\n\n  return fullDaysOutput; // if today's date is after thursday, calculate for next two weeks\n}\n/*\nclass lists for two options (m,w/t,th)\n*/\n\n\nconst optionMW = {\n  \"classes\": [\"Kids Taekwondo Class\", \"Basic Class\", \"Advanced/ Black Belt Class\", \"Family Class/ Black Belt Class\", \"Family Class\"],\n  \"Kids Taekwondo Class\": {\n    \"classType\": \"bestClass\",\n    \"classTime\": \"3:50 - 4:20pm\"\n  },\n  \"Basic Class\": {\n    \"classType\": \"bestClass\",\n    \"classTime\": \"4:20 - 5:00pm\"\n  },\n  \"Advanced/ Black Belt Class\": {\n    \"classType\": \"noRecClass\",\n    \"classTime\": \"5:10 - 5:50pm\"\n  },\n  \"Family Class/ Black Belt Class\": {\n    \"classType\": \"recClass\",\n    \"classTime\": \"6:10 - 6:50pm\"\n  },\n  \"Family Class\": {\n    \"classType\": \"lessRecClass\",\n    \"classTime\": \"7:10 - 7:50pm\"\n  }\n};\nconst optionTTh = {\n  classes: [\"Kids Taekwondo Class\", \"Advanced/ Black Belt Class\", \"Basic Class\", \"Demo Class\", \"Family Class/ Black Belt Class\"],\n  \"Kids Taekwondo Class\": {\n    \"classType\": \"bestClass\",\n    \"classTime\": \"3:50 - 4:20pm\"\n  },\n  \"Advanced/ Black Belt Class\": {\n    \"classType\": \"noRecClass\",\n    \"classTime\": \"4:20 - 5:00pm\"\n  },\n  \"Basic Class\": {\n    \"classType\": \"bestClass\",\n    \"classTime\": \"5:10 - 5:50pm\"\n  },\n  \"Demo Class\": {\n    \"classType\": \"noRecClass\",\n    \"classTime\": \"6:10 - 6:50pm\"\n  },\n  \"Family Class/ Black Belt Class\": {\n    \"classType\": \"lessRecClass\",\n    \"classTime\": \"7:10 - 7:50pm\"\n  }\n};\nconst kidClass = \"Kids Taekwondo Class\";\nconst basicClass = \"Basic Class\";\nconst advancedClass = \"Advanced/ Black Belt Class\";\nconst familyBBClass = \"Family Class/ Black Belt Class\";\nconst familyClass = \"Family Class\";\nconst kidClassTime = \"3:50 - 4:20pm\";\nconst basicClassTime = \"4:20 - 5:00pm\";\nconst advancedClassTime = \"5:10 - 5:50pm\";\nconst familyBBClassTime = \"6:10 - 6:50pm\";\nconst familyClassTime = \"7:10 - :50pm\";\nexport default function ScheduleGrid() {\n  const weekOutput = getThisWeek();\n  console.log(weekOutput);\n  return React.createElement(Columns, {\n    columns: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      paddingBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, weekOutput[0]), React.createElement(GridColumn, {\n    dayOption: optionMW,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    style: {\n      paddingBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, weekOutput[1]), React.createElement(GridColumn, {\n    dayOption: optionTTh,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    style: {\n      paddingBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, weekOutput[2]), React.createElement(GridColumn, {\n    dayOption: optionMW,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    style: {\n      paddingBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, weekOutput[3]), React.createElement(GridColumn, {\n    dayOption: optionTTh,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/kimberlykwon/Documents/hi_john/tkc-sign-up-calendar/src/ScheduleGrid.js"],"names":["React","Columns","GridColumn","getThisWeek","todayDay","Date","getDay","todayDate","getDate","daysOfTheWeek","fullDaysOutput","i","offset","getMonth","optionMW","optionTTh","classes","kidClass","basicClass","advancedClass","familyBBClass","familyClass","kidClassTime","basicClassTime","advancedClassTime","familyBBClassTime","familyClassTime","ScheduleGrid","weekOutput","console","log","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Columns from 'react-columns';\nimport GridColumn from './GridColumn';\n\n\n/*\nfigure out date data here\n*/\nfunction getThisWeek(){\n  // const todayTime = new Date.now(); // time\n  const todayDay = new Date().getDay();\n  const todayDate = new Date().getDate();\n\n  const daysOfTheWeek = [\"Mon\", \"Tues\", \"Wed\", \"Thurs\"];\n  const fullDaysOutput = [];\n\n  // if today's date is in the middle of the week, get dates before and after and calculate next week\n  // TODO: figure out edge cases\n  if (todayDay >= 0 && todayDay <= 4){\n    for (var i = 0; i < 4; i++){\n      const offset = todayDay - i - 1;\n      fullDaysOutput[i] = daysOfTheWeek[i] + \" \" + new Date().getMonth() + \"/\" + (new Date().getDate()-offset);\n    }\n  }\n\n  return fullDaysOutput;\n\n  // if today's date is after thursday, calculate for next two weeks\n}\n\n\n/*\nclass lists for two options (m,w/t,th)\n*/\nconst optionMW = {\n  \"classes\": [\"Kids Taekwondo Class\", \"Basic Class\", \"Advanced/ Black Belt Class\", \"Family Class/ Black Belt Class\", \"Family Class\"],\n  \"Kids Taekwondo Class\" : {\n    \"classType\": \"bestClass\",\n    \"classTime\": \"3:50 - 4:20pm\"\n  },\n  \"Basic Class\" : {\n    \"classType\": \"bestClass\",\n    \"classTime\": \"4:20 - 5:00pm\"\n  },\n  \"Advanced/ Black Belt Class\": {\n    \"classType\": \"noRecClass\",\n    \"classTime\": \"5:10 - 5:50pm\"\n  },\n  \"Family Class/ Black Belt Class\": {\n    \"classType\": \"recClass\",\n    \"classTime\": \"6:10 - 6:50pm\"\n  },\n  \"Family Class\": {\n    \"classType\": \"lessRecClass\",\n    \"classTime\": \"7:10 - 7:50pm\"\n  }\n}\n\nconst optionTTh = {\n  classes: [\"Kids Taekwondo Class\",  \"Advanced/ Black Belt Class\", \"Basic Class\", \"Demo Class\", \"Family Class/ Black Belt Class\"],\n  \"Kids Taekwondo Class\" : {\n    \"classType\": \"bestClass\",\n    \"classTime\": \"3:50 - 4:20pm\"\n  },\n  \"Advanced/ Black Belt Class\": {\n    \"classType\": \"noRecClass\",\n    \"classTime\": \"4:20 - 5:00pm\"\n  },\n  \"Basic Class\" : {\n    \"classType\": \"bestClass\",\n    \"classTime\": \"5:10 - 5:50pm\",\n  },\n  \"Demo Class\": {\n    \"classType\": \"noRecClass\",\n    \"classTime\": \"6:10 - 6:50pm\"\n  },\n  \"Family Class/ Black Belt Class\": {\n    \"classType\": \"lessRecClass\",\n    \"classTime\": \"7:10 - 7:50pm\"\n  }\n}\n\nconst kidClass = \"Kids Taekwondo Class\";\nconst basicClass = \"Basic Class\";\nconst advancedClass = \"Advanced/ Black Belt Class\";\nconst familyBBClass = \"Family Class/ Black Belt Class\";\nconst familyClass = \"Family Class\";\n\nconst kidClassTime = \"3:50 - 4:20pm\";\nconst basicClassTime = \"4:20 - 5:00pm\";\nconst advancedClassTime = \"5:10 - 5:50pm\";\nconst familyBBClassTime = \"6:10 - 6:50pm\";\nconst familyClassTime = \"7:10 - :50pm\";\n\nexport default function ScheduleGrid(){\n  const weekOutput = getThisWeek();\n  console.log(weekOutput);\n\n  return (\n  <Columns columns=\"4\">\n    <div style = {{paddingBottom: 20}}>\n    <p>{weekOutput[0]}</p>\n     <GridColumn dayOption = {optionMW}/>\n     </div>\n     <div style = {{paddingBottom: 20}}>\n     <p>{weekOutput[1]}</p>\n\n     <GridColumn dayOption = {optionTTh}/>\n     </div>\n     <div style = {{paddingBottom: 20}}>\n     <p>{weekOutput[2]}</p>\n\n     <GridColumn dayOption = {optionMW}/>\n     </div>\n     <div style = {{paddingBottom: 20}}>\n     <p>{weekOutput[3]}</p>\n\n     <GridColumn dayOption = {optionTTh}/>\n     </div>\n  </Columns>\n);\n}"]},"metadata":{},"sourceType":"module"}