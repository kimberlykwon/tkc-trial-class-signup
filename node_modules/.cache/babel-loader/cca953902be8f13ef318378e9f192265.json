{"ast":null,"code":"import React, { Component } from 'react';\nimport { Typography, Table, TableBody, TableCell, TableRow, Card, CardActionArea, CardContent, TableHead, createMuiTheme, Paper, Button, IconButton, MuiThemeProvider } from '@material-ui/core';\nimport dateFns from 'date-fns';\nimport { teal, orange, red } from '@material-ui/core/colors';\nimport ChevronLeftRounded from '@material-ui/icons/ChevronLeftRounded';\nimport ChevronRightRounded from '@material-ui/icons/ChevronRightRounded';\n\nvar DisplayMonthlyCalendar = function DisplayMonthlyCalendar(props) {\n  var today = new Date();\n  var currentMonth = dateFns.getMonth(today);\n  /**\n   * If the month being displayed is the same as current month, highlight it with a gray box.\n   * @param {*} currentMonthCounter\n   */\n\n  var ifSameMonthCard = function ifSameMonthCard(currentMonthCounter) {\n    if (currentMonth === currentMonthCounter) {\n      return {\n        backgroundColor: \"rgba(128,128,128,0.5)\",\n        height: \"100%\"\n      };\n    } else {\n      return {\n        backgroundColor: \"rgba(0,0,0,0)\",\n        height: \"100%\"\n      };\n    }\n  };\n\n  var months = [{\n    id: 0,\n    name: \"Jan\"\n  }, {\n    id: 1,\n    name: \"Feb\"\n  }, {\n    id: 2,\n    name: \"Mar\"\n  }, {\n    id: 3,\n    name: \"Apr\"\n  }, {\n    id: 4,\n    name: \"May\"\n  }, {\n    id: 5,\n    name: \"Jun\"\n  }, {\n    id: 6,\n    name: \"Jul\"\n  }, {\n    id: 7,\n    name: \"Aug\"\n  }, {\n    id: 8,\n    name: \"Sep\"\n  }, {\n    id: 9,\n    name: \"Oct\"\n  }, {\n    id: 10,\n    name: \"Nov\"\n  }, {\n    id: 11,\n    name: \"Dec\"\n  }];\n  var rowsOfMonths = [];\n  var rows = [];\n  var monthCounter = 0;\n  var rowCounter = 0;\n\n  while (monthCounter < 12) {\n    var _loop = function _loop(i) {\n      var monthID = months[monthCounter].id;\n      rowsOfMonths.push(React.createElement(TableCell, {\n        key: monthID\n      }, React.createElement(CardActionArea, {\n        onClick: function onClick() {\n          return props.onSetMonth(monthID);\n        },\n        style: {\n          height: \"100%\"\n        }\n      }, React.createElement(Card, {\n        style: ifSameMonthCard(monthCounter)\n      }, React.createElement(CardContent, null, React.createElement(Typography, {\n        align: \"center\",\n        style: props.textColor\n      }, months[monthCounter].name))))));\n      monthCounter += 1;\n    };\n\n    for (var i = 0; i < 3; i++) {\n      _loop(i);\n    }\n\n    rows.push(React.createElement(TableRow, {\n      key: rowCounter,\n      style: {\n        height: \"25%\"\n      }\n    }, rowsOfMonths));\n    rowsOfMonths = [];\n    rowCounter += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableBody, null, rows));\n};\n\nvar DisplayDailyCalendar = function DisplayDailyCalendar(props) {\n  var today = new Date();\n  var selectedDate = props.selectedDate;\n  var monthStart = dateFns.startOfMonth(selectedDate);\n  var monthEnd = dateFns.endOfMonth(monthStart);\n  var startDate = dateFns.startOfWeek(monthStart);\n  var endDate = dateFns.endOfWeek(monthEnd);\n  var weekdays = [{\n    id: 0,\n    day: \"Sun\"\n  }, {\n    id: 1,\n    day: \"Mon\"\n  }, {\n    id: 2,\n    day: \"Tue\"\n  }, {\n    id: 3,\n    day: \"Wed\"\n  }, {\n    id: 4,\n    day: \"Thu\"\n  }, {\n    id: 5,\n    day: \"Fri\"\n  }, {\n    id: 6,\n    day: \"Sat\"\n  }];\n  var eachWeek = [];\n  var daysOfWeek = [];\n  var day = startDate;\n  var end = endDate;\n  var formattedDate = void 0;\n  var dateFormat = \"D\";\n  var weekNumber = 1;\n\n  while (day <= end) {\n    var _loop = function _loop(i) {\n      formattedDate = dateFns.format(day, dateFormat);\n      var cloneDay = day;\n      daysOfWeek.push(React.createElement(TableCell, {\n        key: formattedDate\n      }, React.createElement(CardActionArea, {\n        onClick: function onClick() {\n          return props.onDateClick(dateFns.parse(cloneDay));\n        },\n        style: {\n          height: \"100%\"\n        }\n      }, React.createElement(Card, {\n        style: dateFns.isSameDay(day, selectedDate) ? {\n          backgroundColor: \"rgba(128,128,128,0.5)\",\n          height: \"100%\"\n        } : {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          height: \"100%\"\n        }\n      }, React.createElement(CardContent, null, dateFns.isSameDay(day, today) ? React.createElement(Typography, {\n        align: \"center\",\n        color: \"primary\",\n        style: {\n          fontSize: \"20px\"\n        }\n      }, formattedDate) : React.createElement(Typography, {\n        align: \"center\",\n        style: dateFns.isSameMonth(day, monthStart) ? props.textColor : {\n          color: \"rgba(128,128,128,1)\"\n        }\n      }, formattedDate))))));\n      day = dateFns.addDays(day, 1);\n    };\n\n    for (var i = 0; i < 7; i++) {\n      _loop(i);\n    }\n\n    eachWeek.push(React.createElement(TableRow, {\n      key: weekNumber\n    }, daysOfWeek));\n    daysOfWeek = [];\n    weekNumber += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableHead, null, React.createElement(TableRow, null, weekdays.map(function (day) {\n    return React.createElement(TableCell, {\n      key: day.id\n    }, React.createElement(Typography, {\n      align: \"center\"\n    }, day.day));\n  }))), React.createElement(TableBody, null, eachWeek));\n};\n\nvar DisplayYearlyCalendar = function DisplayYearlyCalendar(props) {\n  var today = new Date();\n  var currentYearDateFNS = dateFns.getYear(today);\n  var dateYearFormat = \"YYYY\";\n  var pastYears = dateFns.addYears(props.year, -9);\n  var futureYears = dateFns.addYears(props.year, 2);\n  var yearStart = parseInt(dateFns.format(pastYears, dateYearFormat));\n  var yearEnd = parseInt(dateFns.format(futureYears, dateYearFormat));\n  var rowsOfYears = [];\n  var rows = [];\n  var rowCounter = 0;\n  /**\n   * If the month being displayed is the same as current month, highlight it with a gray box.\n   */\n\n  var ifSameCurrentYearCard = function ifSameCurrentYearCard(currentYearCounter) {\n    if (currentYearDateFNS === currentYearCounter) {\n      return {\n        backgroundColor: \"rgba(128,128,128,0.5)\",\n        height: \"100%\"\n      };\n    } else {\n      return {\n        backgroundColor: \"rgba(0,0,0,0)\",\n        height: \"100%\"\n      };\n    }\n  };\n\n  var currentYear = yearStart;\n\n  while (currentYear < yearEnd + 1) {\n    var _loop = function _loop(i) {\n      var cloneCurrentYear = currentYear;\n      rowsOfYears.push(React.createElement(TableCell, {\n        key: currentYear\n      }, React.createElement(CardActionArea, {\n        style: {\n          height: \"100%\"\n        },\n        onClick: function onClick() {\n          return props.onSetYear(cloneCurrentYear);\n        }\n      }, React.createElement(Card, {\n        style: ifSameCurrentYearCard(cloneCurrentYear)\n      }, React.createElement(CardContent, null, React.createElement(Typography, {\n        align: \"center\",\n        style: props.textColor\n      }, currentYear))))));\n      currentYear += 1;\n    };\n\n    for (var i = 0; i < 3; i++) {\n      _loop(i);\n    }\n\n    rows.push(React.createElement(TableRow, {\n      key: rowCounter,\n      style: {\n        height: \"25%\"\n      }\n    }, rowsOfYears));\n    rowsOfYears = [];\n    rowCounter += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableBody, null, rows));\n}; //Material theme\n\n\nvar darkTheme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: teal[\"A100\"]\n    },\n    secondary: {\n      main: orange[\"A100\"],\n      light: orange[500]\n    },\n    caution: {\n      main: red[500]\n    },\n    type: \"dark\"\n  }\n});\nvar lightTheme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: teal[\"A100\"]\n    },\n    secondary: {\n      main: orange[\"A100\"],\n      light: orange[500]\n    },\n    caution: {\n      main: red[500]\n    },\n    type: \"light\"\n  }\n}); //export default theme;\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Calendar = function (_Component) {\n  inherits(Calendar, _Component);\n\n  function Calendar() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      selectedDate: new Date(),\n      selectedMonth: new Date(),\n      mode: 0,\n      showFunctionalHeader: true,\n      selectStartandEnd: false,\n      selected1: null,\n      selected2: null,\n      functionalMode: false\n    }, _this.renderHeader = function () {\n      var dateYearFormat = \"YYYY\";\n      var dateMonthFormat = \"MMMM YYYY\";\n      var header = void 0;\n\n      if (_this.state.mode === 0) {\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, dateFns.format(_this.state.selectedDate, dateMonthFormat));\n      } else if (_this.state.mode === 1) {\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, dateFns.format(_this.state.selectedDate, dateYearFormat));\n      } else {\n        var pastFiveYears = dateFns.addYears(_this.state.selectedDate, -9);\n        var nextFiveYears = dateFns.addYears(_this.state.selectedDate, 2);\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, dateFns.format(pastFiveYears, dateYearFormat), \" -\", \" \", dateFns.format(nextFiveYears, dateYearFormat));\n      }\n\n      return React.createElement(Paper, {\n        style: {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }\n      }, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.onChevronClick(true);\n        }\n      }, React.createElement(ChevronLeftRounded, null)), React.createElement(Button, {\n        onClick: _this.modeChange\n      }, header), React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.onChevronClick(false);\n        }\n      }, React.createElement(ChevronRightRounded, null)));\n    }, _this.renderYearHeader = function () {\n      var dateYearFormat = \"YYYY\";\n      var header = void 0;\n      var pastFiveYears = dateFns.addYears(_this.state.selectedDate, -9);\n      var nextFiveYears = dateFns.addYears(_this.state.selectedDate, 2);\n      header = React.createElement(Typography, {\n        variant: \"h5\",\n        inline: true\n      }, dateFns.format(pastFiveYears, dateYearFormat), \" -\", \" \", dateFns.format(nextFiveYears, dateYearFormat));\n      return React.createElement(Paper, {\n        style: {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }\n      }, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.yearChevronClick(true);\n        }\n      }, React.createElement(ChevronLeftRounded, null)), header, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.yearChevronClick(false);\n        }\n      }, React.createElement(ChevronRightRounded, null)));\n    }, _this.modeChange = function () {\n      if (_this.state.mode === 0) {\n        _this.setState({\n          mode: 1\n        });\n      } else if (_this.state.mode === 1) {\n        _this.setState({\n          mode: 2,\n          selectedDate: new Date()\n        });\n      } else {\n        _this.setState({\n          mode: 0,\n          selectedDate: new Date()\n        });\n      }\n    }, _this.onChevronClick = function (direction) {\n      if (direction) {\n        if (_this.state.mode === 0) {\n          _this.setState({\n            selectedDate: dateFns.addMonths(_this.state.selectedDate, -1)\n          });\n        } else if (_this.state.mode === 1) {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, -1)\n          });\n        } else {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, -9)\n          });\n        }\n      } else {\n        if (_this.state.mode === 0) {\n          _this.setState({\n            selectedDate: dateFns.addMonths(_this.state.selectedDate, 1)\n          });\n        } else if (_this.state.mode === 1) {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, 1)\n          });\n        } else {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, 9)\n          });\n        }\n      }\n    }, _this.yearChevronClick = function (direction) {\n      if (direction) {\n        _this.setState({\n          selectedDate: dateFns.addYears(_this.state.selectedDate, -9)\n        });\n      } else {\n        _this.setState({\n          selectedDate: dateFns.addYears(_this.state.selectedDate, 9)\n        });\n      }\n    }, _this.onDateClick = function (day) {\n      _this.setState({\n        selectedDate: day\n      }); //This is for returning date when publishing\n\n\n      if (_this.props.selection !== undefined && _this.props.mode !== \"month\" && _this.props.mode !== \"year\") {\n        _this.props.selection(day);\n      }\n    }, _this.onSetMonth = function (value) {\n      if (_this.props.selection !== undefined && _this.props.mode === \"month\") {\n        _this.props.selection(value);\n      } else {\n        var result = dateFns.setMonth(_this.state.selectedDate, value);\n\n        _this.setState({\n          selectedDate: result,\n          mode: 0\n        });\n      }\n    }, _this.onYearClick = function (value) {\n      if (_this.props.selection !== undefined && _this.props.mode === \"year\") {\n        _this.props.selection(value);\n      } else {\n        _this.setState({\n          mode: 1,\n          selectedDate: dateFns.setYear(_this.state.selectedDate, value)\n        });\n      }\n    }, _this.defaultDaySelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      var body = void 0;\n\n      if (_this.state.mode === 0) {\n        body = React.createElement(DisplayDailyCalendar, {\n          selectedDate: _this.state.selectedDate,\n          onDateClick: _this.onDateClick,\n          light: textColor\n        });\n      } else if (_this.state.mode === 1) {\n        body = React.createElement(DisplayMonthlyCalendar, {\n          onSetMonth: _this.onSetMonth,\n          light: textColor\n        });\n      } else {\n        body = React.createElement(DisplayYearlyCalendar, {\n          year: _this.state.selectedDate,\n          onSetYear: _this.onYearClick,\n          light: textColor\n        });\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        }\n      }, _this.renderHeader(), body);\n    }, _this.monthSelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      return React.createElement(DisplayMonthlyCalendar, {\n        onSetMonth: _this.onSetMonth,\n        light: textColor\n      });\n    }, _this.yearSelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        }\n      }, _this.renderYearHeader(), React.createElement(DisplayYearlyCalendar, {\n        year: _this.state.selectedDate,\n        onSetYear: _this.onYearClick,\n        light: textColor\n      }));\n    }, _this.modeSelector = function () {\n      if (_this.props.mode === \"year\") {\n        return _this.yearSelector();\n      } else if (_this.props.mode === \"month\") {\n        return _this.monthSelector();\n      } else {\n        return _this.defaultDaySelector();\n      }\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n  /***************************************************************************************\n   * Calender Header functions\n   ***************************************************************************************/\n\n  /**\n   * Depending on the mode, the calendar header will render different text.\n   */\n\n  /**\n   * Render the header but without mode change.\n   */\n\n  /*\n   * Clicking on the header will change the mode between days, months and years.\n   */\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n\n  /***************************************************************************************\n   * Calendar functions (on click)\n   ***************************************************************************************/\n\n  /**\n   * Clicking on a date in mode 0 (Day calendar mode)\n   */\n\n  /**\n   * Clicking on a month in mode 1 will set the month and return back to the day calendar.(Monthly calendar mode)\n   * If explicitly set to month mode, it will only return the month value.\n   * Else it will change back to mode 0.\n   */\n\n  /**\n   * Clicking on a year in mode 2 will set the year and return back to monthly calendar. (Yearly calendar mode)\n   * If explicitly set to year mode, it will only return the year value.\n   * Else it will change back to mode 1.\n   */\n\n  /***************************************************************************************\n   * Renders the entire body of the calendar\n   * Alternate between day, month and year.\n   ***************************************************************************************/\n\n  /**\n   * Renders the regular calendar that can switch between day, month and year view.\n   */\n\n  /**\n   * Only render the month calendar and does not switch modes.\n   */\n\n  /**\n   * Only render the year calendar and does not switch modes.\n   */\n  //year={this.state.selectedDate}\n\n  /**\n   * Depending on the props given, renders the different modes.\n   */\n\n\n  createClass(Calendar, [{\n    key: \"render\",\n\n    /**\n     * Main render method\n     */\n    value: function render() {\n      return React.createElement(MuiThemeProvider, {\n        theme: this.props.light ? lightTheme : darkTheme\n      }, React.createElement(Paper, {\n        style: this.props.generalStyle\n      }, this.modeSelector()));\n    }\n  }]);\n  return Calendar;\n}(Component);\n\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}